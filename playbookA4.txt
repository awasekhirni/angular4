Angular 4x Code Play Session Done at Harman-Samsung from 16 August-19 August 2017.
Copyright 2017 TPRI- SYED AWASE KHIRNI 
Please acknowledge TPRI and Dr. Syed Awase Khirni if you are using this.
awasekhirni@gmail.com | sak@territorialprescience.com | 9035433124.
Please get in touch with us directly for any code driven trainings from UI to AI. 
Brokers Please excuse. We also offer training in Middle East, Singapore, Malaysia, Indonesia, South Africa, Americas.

OneWayBinding With Model 
1. A4 QuickStart Seed 
2. Construct a model.ts
3. create a component.ts 
4. register the component in appmodule.ts => declarations and import 
5. bind the component.ts "Selector" to the parent component 
6.create the instance of the model in the component.ts 
7. bindit using {{}} to the component =>template/templateUrl 
8. run your application with "npm start"


TwowayDatabinding with Model, *ngFor
1.A4 quickstart seed
2. construct a model.ts
3. create a corresponding component.ts 
4. import formsModule in the component.ts 
5. register the component in appmodule.ts => import formsModule in imports decorator property of @ngModule
6. in the view of the component use [(ngModel)]="object.property"
7. bind it to the parent component 
8.run your application with "npm start"


Services in Angular 4 
1. A4 Quickstart seed 
2. create shared service => import HttpModule,http, RequestOptions,Response from '@angular/http'
3. apply method decorator @injectable() to the class file to make it a service 
4. constructor =>create an instance of http, and then write appropriate http action verb methods to fetch the data from the endpoint 
   return this._http.get(url).map((response:Response)=>response.json()).catch(this.handleError);
5. create handleError Method to catch the serverside errors
6. create components => import shared service => bind this to component lifecycle hook based on your requirement 
  Lifecycle hooks (1. ngOnInit 2.ngOnChange 3.ngDoCheck 4. ngAfterContentInit 5. ngAfterContentChecked 6. ngAfterViewInit 7. ng AfterViewChecked 8. ngOnDestroy)
  7.subscribe in the lifecycle hook to the approriate methods and bind to the corresponding views. 
  8. Register the service and the component in appmodule.ts , @NgModule => providers:[sharedService] and declarations for components. 
  9. bind the component to the parent/root component 
  10. run your application with "npm start" 

IMPORTANT NOTE 
@Component => if moduleId included => templateUrls are absolute URLS 

SPA Routes for Angular 4 
1.Identify a list of components created 
2. create main.routes.ts => import Routes,RouterModule from '@angular/router' 
3. export const routes => define path, pathMath, redirectTo and individual routing path for each component 
4. register the routes to RouterModule using @NgModule({imports,exports}) => RouterModule.forRoot or RouterModule.forChild, export class AppRouting 
5. App.component.ts => templateUrl => appmain.html => routerLink and routerOutlet defined to match to the router paths outlined in the main.routes.ts file 
6. Register Routes in app.module.ts  and associate components 
7. run your application with "npm start"

Angular 4x Enabling Production Mode.
Enabling Production Mode in Angular4x is fairly simple. Follow these steps. 
1. main.ts => import import {enableProdMode} from '@angular/core';
2.add enableProdMode()

Your final main.ts file should look like this:

import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import {enableProdMode} from '@angular/core';
import { AppModule } from './app/app.module';
enableProdMode();
platformBrowserDynamic().bootstrapModule(AppModule);



